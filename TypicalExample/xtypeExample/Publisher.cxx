// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HelloWorldPublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/publisher/Publisher.hpp>
#include <fastdds/dds/publisher/qos/PublisherQos.hpp>
#include <fastdds/dds/publisher/DataWriter.hpp>
#include <fastdds/dds/publisher/qos/DataWriterQos.hpp>
#include <fastrtps/xmlparser/XMLProfileManager.h>
#include <fastrtps/types/DynamicDataFactory.h>

#include <thread>
#include <chrono>

#include "Publisher.h"
#include "mytimer.h"

using namespace eprosima::fastdds::dds;

HelloWorldPublisher::HelloWorldPublisher()
    : participant_(nullptr)
    , publisher_(nullptr)
    , topic_(nullptr)
    , writer_(nullptr)
{
}

HelloWorldPublisher::~HelloWorldPublisher()
{
    if (writer_ != nullptr)
    {
        publisher_->delete_datawriter(writer_);
    }
    if (publisher_ != nullptr)
    {
        participant_->delete_publisher(publisher_);
    }
    if (topic_ != nullptr)
    {
        participant_->delete_topic(topic_);
    }
    DomainParticipantFactory::get_instance()->delete_participant(participant_);
}

bool HelloWorldPublisher::init()
{
    
    // load xml file
    if (ReturnCode_t::RETCODE_OK !=
        DomainParticipantFactory::get_instance()->load_XML_profiles_file("../Publisher.xml"))
    {
        return false;
    }
    if (ReturnCode_t::RETCODE_OK !=
        DomainParticipantFactory::get_instance()->load_XML_profiles_file("../Camera.xml"))
    {
        return false;
    }


    //CREATE THE PARTICIPANT
    participant_ = DomainParticipantFactory::get_instance()->create_participant_with_profile("participant_profile");
    if (participant_ == nullptr)
    {
        return false;
    }

    //REGISTER THE TYPE
    
    dyn_type = eprosima::fastrtps::xmlparser::XMLProfileManager::getDynamicTypeByName("GroupFrame")->build();
    TypeSupport m_type(new eprosima::fastrtps::types::DynamicPubSubType(dyn_type));
    m_type.get()->auto_fill_type_information(false);
    m_type.get()->auto_fill_type_object(false); // m_type.get()->auto_fill_type_object(true); //  bug
    m_type.register_type(participant_);

    std::cout << "dyn_type name:" <<  dyn_type->get_name()  <<  std::endl;
    std::cout << "dyn_type get_total_bounds: size:"<<  dyn_type->get_total_bounds() <<  std::endl;



    //CREATE THE PUBLISHER
    publisher_ = participant_->create_publisher(PUBLISHER_QOS_DEFAULT);
    if (publisher_ == nullptr)
    {
        return false;
    }

    //CREATE THE TOPIC
    eprosima::fastrtps::TopicAttributes tp_attr;
    eprosima::fastrtps::xmlparser::XMLProfileManager::fillTopicAttributes("topic_hello_profile", tp_attr);
    topic_ = participant_->create_topic_with_profile(
        tp_attr.getTopicName().to_string(),
        tp_attr.getTopicDataType().to_string(),
        "topic_hello_profile");
    if (topic_ == nullptr)
    {
        return false;
    }


    // CREATE THE WRITER
    writer_ = publisher_->create_datawriter_with_profile(topic_, "datawriter_profile", &listener_);
    if (writer_ == nullptr)
    {
        return false;
    }

    std::cout << "HelloWorld DataWriter created." << std::endl;
    return true;
}

void HelloWorldPublisher::PubListener::on_publication_matched(
        eprosima::fastdds::dds::DataWriter*,
        const eprosima::fastdds::dds::PublicationMatchedStatus& info)
{
    if (info.current_count_change == 1)
    {
        matched = info.total_count;
        std::cout << "DataWriter matched." << std::endl;
    }
    else if (info.current_count_change == -1)
    {
        matched = info.total_count;
        std::cout << "DataWriter unmatched." << std::endl;
    }
    else
    {
        std::cout << info.current_count_change
                  << " is not a valid value for PublicationMatchedStatus current count change" << std::endl;
    }
}

void HelloWorldPublisher::run()
{
   
    int msgsent = 0;
    auto m_Hello = eprosima::fastrtps::types::DynamicDataFactory::get_instance()->create_data(dyn_type);

    while(1) 
    {

        ++msgsent;
        // set date
        m_Hello->set_uint64_value(msgsent, 1);

        eprosima::fastrtps::types::DynamicData* inner = m_Hello->loan_value(0);
        auto now = std::chrono::system_clock::now();
        auto now_ns = std::chrono::duration_cast<std::chrono::nanoseconds>(now.time_since_epoch()).count();
        inner->set_uint64_value(now_ns, 2); 
        m_Hello->return_loaned_value(inner);

        // eprosima::fastrtps::types::DynamicData* inner2 = m_Hello->loan_value(2);
        // eprosima::fastrtps::types::DynamicData_ptr sque_data = eprosima::fastrtps::types::DynamicData_ptr(inner2->loan_value(0));
        // inner2->set_bool_value(true, 2);
        // inner2->set_uint16_value(1920, 5);
        // inner2->set_uint16_value(1080, 6);
        // m_Hello->return_loaned_value(inner2);

        // pub data
        myTimer t;
        writer_->write(m_Hello);
        std::cout << "Sending sample, index=" << m_Hello->get_uint64_value(1);
        std::cout <<  ", write cost " << t.count_ms() << "ms" << std::endl;

        // sleep  25HZ
        std::this_thread::sleep_for(std::chrono::milliseconds(40));
    }

    eprosima::fastrtps::types::DynamicDataFactory::get_instance()->delete_data(m_Hello);
}
