// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file helloSubscriber.h
 * This header file contains the declaration of the subscriber functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _FAST_DDS_GENERATED_HELLO_SUBSCRIBER_H_
#define _FAST_DDS_GENERATED_HELLO_SUBSCRIBER_H_

#include <fastdds/dds/domain/DomainParticipant.hpp>
#include <fastdds/dds/subscriber/DataReader.hpp>
#include <fastdds/dds/subscriber/DataReaderListener.hpp>
#include <fastdds/dds/subscriber/Subscriber.hpp>
#include <fastdds/dds/domain/DomainParticipantListener.hpp>

using namespace eprosima::fastdds::dds;

class helloSubscriber
{
public:

    helloSubscriber();

    virtual ~helloSubscriber();

    bool init(int flag);

    void run();

private:

    eprosima::fastdds::dds::DomainParticipant* participant_;
    eprosima::fastdds::dds::Subscriber* subscriber_;
    eprosima::fastdds::dds::Topic* topic_;
    eprosima::fastdds::dds::DataReader* reader_;
    eprosima::fastdds::dds::TypeSupport type_;

    class SubListener : public eprosima::fastdds::dds::DataReaderListener
    {
    public:

        SubListener() = default;

        ~SubListener() override = default;

        void on_data_available(
                eprosima::fastdds::dds::DataReader* reader) override;

        void on_subscription_matched(
                eprosima::fastdds::dds::DataReader* reader,
                const eprosima::fastdds::dds::SubscriptionMatchedStatus& info) override;

        void on_requested_deadline_missed(
                eprosima::fastdds::dds::DataReader* reader,
                const eprosima::fastdds::dds::RequestedDeadlineMissedStatus& status) override;

         void on_requested_incompatible_qos(
            eprosima::fastdds::dds::DataReader* reader,
            const eprosima::fastdds::dds::RequestedIncompatibleQosStatus& status) override;

        void on_sample_lost(
            eprosima::fastdds::dds::DataReader* reader, 
            const eprosima::fastdds::dds::SampleLostStatus& status) override;

        void on_sample_rejected(
            eprosima::fastdds::dds::DataReader* reader, 
            const eprosima::fastdds::dds::SampleRejectedStatus& status) override;

        void on_liveliness_changed(
            eprosima::fastdds::dds::DataReader* reader, 
            const eprosima::fastdds::dds::LivelinessChangedStatus& status) override;
  

        int matched = 0;
        uint32_t samples = 0;
    }
    listener_;


   class CustomDomainParticipantListener : public eprosima::fastdds::dds::DomainParticipantListener {
    public:

        CustomDomainParticipantListener() {}

        ~CustomDomainParticipantListener() override {}

        /* Custom Callback on_participant_discovery */
        void on_participant_discovery(
            DomainParticipant* participant,
            eprosima::fastrtps::rtps::ParticipantDiscoveryInfo&& info) override;


        void on_subscriber_discovery(
            DomainParticipant* participant,
            eprosima::fastrtps::rtps::ReaderDiscoveryInfo&& info) override;

        void on_publisher_discovery(
            DomainParticipant* participant,
            eprosima::fastrtps::rtps::WriterDiscoveryInfo&& info) override;

        void on_type_discovery(
            DomainParticipant* participant,
            const eprosima::fastrtps::rtps::SampleIdentity& request_sample_id,
            const eprosima::fastrtps::string_255& topic,
            const eprosima::fastrtps::types::TypeIdentifier* identifier,
            const eprosima::fastrtps::types::TypeObject* object,
            eprosima::fastrtps::types::DynamicType_ptr dyn_type) override;

    public:
            eprosima::fastdds::dds::DataReader* reader_;

    } listener_participant_;
};

#endif // _FAST_DDS_GENERATED_HELLO_SUBSCRIBER_H_